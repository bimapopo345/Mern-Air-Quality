{
  "info": {
    "name": "IoT Air Quality Dashboard - Testing & Cleanup",
    "description": "Modified collection for testing and cleaning up data. Includes a new endpoint to delete all air quality data.",
    "version": "3.0.1",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{jwt_token}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:5000",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "üîê Authentication",
      "item": [
        {
          "name": "Login Admin User",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "try {",
                  "    if (pm.response.code === 200) {",
                  "        const response = pm.response.json();",
                  "        if (response && response.token) {",
                  "            // Save token",
                  "            pm.environment.set('jwt_token', response.token);",
                  "            console.log('‚úÖ JWT Token saved to environment.');",
                  "",
                  "            // Save user data if available",
                  "            if (response.user) {",
                  "                if (response.user.id) {",
                  "                    pm.environment.set('user_id', response.user.id.toString());",
                  "                    console.log('‚úÖ User ID saved:', response.user.id);",
                  "                }",
                  "                if (response.user.role) {",
                  "                    pm.environment.set('user_role', response.user.role);",
                  "                    console.log('‚úÖ User Role saved:', response.user.role);",
                  "                }",
                  "            }",
                  "        } else {",
                  "            console.error('‚ùå ERROR: No token found in response.');",
                  "            console.error('Response Body:', JSON.stringify(response, null, 2));",
                  "        }",
                  "    } else {",
                  "        console.error('‚ùå ERROR: Login failed with status code:', pm.response.code);",
                  "        console.error('Response Body:', pm.response.text());",
                  "    }",
                  "} catch (e) {",
                  "    console.error('‚ùå CRITICAL ERROR in Postman Test Script:');",
                  "    console.error(e.message);",
                  "    console.error('Stack:', e.stack);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@company.com\",\n  \"password\": \"admin123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "login"]
            }
          }
        },
        {
          "name": "Login Jane Smith User (Owner of Sensors)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    // Check if response and token exist",
                  "    if (response && response.token) {",
                  "        pm.environment.set('jwt_token', response.token);",
                  "        // Set user_id, ensuring it's a string",
                  "        if (response.user && response.user._id) {",
                  "            pm.environment.set('user_id', response.user._id.toString());",
                  "        }",
                  "        // Set user_role",
                  "        if (response.user && response.user.role) {",
                  "            pm.environment.set('user_role', response.user.role);",
                  "        }",
                  "        console.log('‚úÖ User login successful, token and user data saved.');",
                  "        console.log('Token:', response.token.substring(0, 30) + '...');",
                  "    } else {",
                  "        console.error('‚ùå Login response did not contain a token.');",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå User login failed with status code:', pm.response.code);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"jane.smith@company.com\",\n  \"password\": \"user123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "login"]
            }
          }
        }
      ]
    },
    {
      "name": "üßπ Data Management (Testing)",
      "item": [
        {
          "name": "Delete All Air Quality Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log(`‚úÖ Successfully deleted ${response.count} data entries.`);",
                  "} else {",
                  "    console.log('‚ùå Failed to delete data');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/admin/data/all",
              "host": ["{{base_url}}"],
              "path": ["api", "admin", "data", "all"]
            }
          }
        }
      ]
    },
    {
      "name": "üìä IoT Device Data Endpoints",
      "description": "IMPORTANT: Run 'Set Jane Smith API Key (Direct)' or 'Login Jane Smith User' first to set the correct device_api_key. The sensors OFFICE-SENSOR-01 and AIR-SENSOR-002 belong to Jane Smith (ID: 68d9cc51d7077fb4b4ba570b).",
      "item": [
        {
          "name": "Submit Air Quality Data (OFFICE-SENSOR-01)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    console.log('‚úÖ Air quality data submitted successfully');",
                  "    const response = pm.response.json();",
                  "    console.log('AQI:', response.data.aqi);",
                  "    console.log('Category:', response.data.airQualityCategory);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-API-Key",
                "value": "{{device_api_key}}",
                "description": "Device API Key for IoT authentication"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"deviceId\": \"OFFICE-SENSOR-01\",\n  \"pm25\": 12.5,\n  \"pm10\": 20.1,\n  \"temperature\": 24.0,\n  \"humidity\": 60.0,\n  \"co2\": 420,\n  \"voc\": 0.5,\n  \"aqi\": 50,\n  \"location\": {\n    \"name\": \"Main Office\",\n    \"coordinates\": {\n      \"latitude\": -6.2088,\n      \"longitude\": 106.8456\n    }\n  },\n  \"batteryLevel\": 85,\n  \"signalStrength\": -50\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/data",
              "host": ["{{base_url}}"],
              "path": ["api", "data"]
            }
          }
        },
        {
          "name": "Submit Good AQI Data (AIR-SENSOR-002)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-API-Key",
                "value": "{{device_api_key}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"deviceId\": \"AIR-SENSOR-002\",\n  \"pm25\": 8.5,\n  \"pm10\": 14.2,\n  \"temperature\": 22.1,\n  \"humidity\": 58.3,\n  \"co2\": 380,\n  \"voc\": 0.3,\n  \"aqi\": 35\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/data",
              "host": ["{{base_url}}"],
              "path": ["api", "data"]
            }
          }
        },
        {
          "name": "Submit Poor AQI Data",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-API-Key",
                "value": "{{device_api_key}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"deviceId\": \"AIR-SENSOR-003\",\n  \"pm25\": 45.8,\n  \"pm10\": 67.2,\n  \"temperature\": 26.8,\n  \"humidity\": 72.1,\n  \"co2\": 680,\n  \"voc\": 2.1,\n  \"aqi\": 162\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/data",
              "host": ["{{base_url}}"],
              "path": ["api", "data"]
            }
          }
        }
      ]
    },
    {
      "name": "üë§ User Profile & API Key Management",
      "item": [
        {
          "name": "Set Jane Smith API Key (Direct)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Directly set Jane Smith's API Key from MongoDB",
                  "const janeApiKey = 'daq_mg4d5g9o_80fe661889d4a895cad3c3a863c99c7be80129dd92451820';",
                  "pm.environment.set('device_api_key', janeApiKey);",
                  "console.log('‚úÖ Jane Smith Device API Key set directly from MongoDB data.');",
                  "console.log('API Key:', janeApiKey.substring(0, 20) + '...');",
                  "",
                  "// Also set user_id for Jane Smith",
                  "pm.environment.set('user_id', '68d9cc51d7077fb4b4ba570b');",
                  "console.log('‚úÖ Jane Smith User ID set: 68d9cc51d7077fb4b4ba570b');"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/status",
              "host": ["{{base_url}}"],
              "path": ["api", "status"]
            }
          }
        },
        {
          "name": "Reveal API Key and Save",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    // Check if response and apiKey exist",
                  "    if (response && response.apiKey) {",
                  "        pm.environment.set('device_api_key', response.apiKey);",
                  "        console.log('‚úÖ Device API Key saved to environment.');",
                  "        console.log('API Key:', response.apiKey.substring(0, 20) + '...');",
                  "    } else {",
                  "        console.error('‚ùå Reveal API Key response did not contain an apiKey.');",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Failed to reveal API key with status code:', pm.response.code);",
                  "    console.log('Check if user is logged in (jwt_token is set) and has an API key associated.');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/users/me/api-key/reveal",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "me", "api-key", "reveal"]
            }
          }
        },
        {
          "name": "Get Latest Data (for Dashboard)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/data/latest",
              "host": ["{{base_url}}"],
              "path": ["api", "data", "latest"]
            }
          }
        },
        {
          "name": "Get Chart Data (for Dashboard)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/data/charts?hours=24",
              "host": ["{{base_url}}"],
              "path": ["api", "data", "charts"],
              "query": [
                {
                  "key": "hours",
                  "value": "24"
                }
              ]
            }
          }
        },
        {
          "name": "Test Complete Dashboard Flow (Jane Smith)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response && response.data) {",
                  "        console.log('‚úÖ Dashboard data retrieved successfully for Jane Smith');",
                  "        console.log('Latest AQI:', response.data.aqi);",
                  "        console.log('Device ID:', response.data.deviceId);",
                  "        console.log('Temperature:', response.data.temperature + '¬∞C');",
                  "        console.log('PM2.5:', response.data.pm25 + ' Œºg/m¬≥');",
                  "    } else {",
                  "        console.log('‚ö†Ô∏è  No data found for user');",
                  "    }",
                  "} else if (pm.response.code === 404) {",
                  "    console.log('‚ùå No air quality data found for this user');",
                  "    console.log('Make sure to submit sensor data first using the IoT Device endpoints');",
                  "} else {",
                  "    console.log('‚ùå Failed to get latest data:', pm.response.code);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/data/latest",
              "host": ["{{base_url}}"],
              "path": ["api", "data", "latest"]
            }
          }
        }
      ]
    }
  ]
}